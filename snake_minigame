#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 11 22:58:48 2016

@author: Will Cox 
"""

from pygame.locals import *
from random import randint
import pygame
import time

class neuro:
    x = 0
    y = 0
    step = 44
    
    def __init__(self, x,y):
        self.x = x * self.step
        self.y = y * self.step
        
    def draw(self, surface,image):
        surface.blit(image, (self.x, self.y))
    

class game_player:
    
    x = [0]
    y = [0]
    step = 44
    direction = 0
    length = 3
    
    updateCountMax = 2
    updateCount = 0
    
    def __init__(self,length):
        self.length = length
        for i in range(0,2000):
            self.x.append(-100)
            self.y.append(-100)
            
        self.x[1] = 1 * 44
        self.x[2] = 2 * 44
        
        
    def update(self):
        
        self.updateCount =  self.updateCount = 1
        if self.updateCount > self.updateCountMax:
            
            #update previous positions
            for i in range(self.length-1,0,-1):
                #print ("self.x[" + str(i) + "] = self.x[" + str(i-1) + "]")
                self.x[i] = self.x[i-1]
                self.y[i] = self.y[i-1]
                
            if self.direction == 0:
                self.x[0] = self.x[0] + self.step
            if self.direction == 1:
                self.x[0] = self.x[0] - self.step
            if self.direction == 2:
                self.y[0] = self.y[0] - self.step
            if self.direction == 3:
                self.y[0] = self.y[0] + self.step
            
            self.updaetCount = 0
    
    def move_left(self):
        self.direction = 1
        
    def move_right(self):
        self.direction = 0
        
    def move_up(self):
        self.direction = 2
        
    def move_down(self):
        self.direction = 3
        
    def draw(self, surface,image):
        for i in range(0,self.length):
            surface.blit(image,(self.x[i],self.y[i]))
            
            
class Game:
    def isCollision(self, x1,y1,x2,y2,bsize):
            if x1 >= x2 and x1 <= x2 + bsize:
                if y1 >= y2 and y1 <= y2 + bsize:
                    return True
            return False
        
class App:
    windowWidth = 800
    windowHeigth = 600
    player = 0
    neuro = 0
    
    def __init__(self):
        self.running = True
        self.display_surf = None
        self.image_surf = None
        self.neuro_surf = None
        self.game = Game()
        self.player = game_player(3)
        self.neuro = neuro(100,50)
        
    def on_init(self):
        pygame.init()
        self._display_surf = pygame.display.set_mode((self.windowWidth,self.windowHeigth),pygame.HWSURFACE)
        
        self.running = True
        self.image_surf = pygame.image.load("Steak-100.png").convert()
        self.neuro_surf = pygame.image.load("Steak-100.png").convert()
    
    def on_event(self,event):
        if event.type == QUIT:
            self._running = False
            
    def on_loop(self):
        self.player.update()
        
        for i in range(0,self.player.length):
            if self.game.isCollision(self.neuro.x, self.neuro.y, self.player.x[i],self.player.y[i], 44):
                self.neuro.x = randint(2,9) * 44
                self.neuro.y = randint(2,9) * 44
                self.player.length = self.player.length + 1
        
        for i in range(0,self.player.length):
            if self.game.isCollision(self.neuro.x,self.neuro.y,self.player.x[i],self.player.y[i],44):
                print("You lose!")
                exit(0)
                
        pass
    
    def on_render(self):
        self._display_surf.fill((0,0,0))
        self.player.draw(self._display_surf, self.image_surf)
        self.neuro.draw(self._display_surf,self.neuro_surf)
        pygame.display.flip()
    
    def on_cleanup(self):
        pygame.quit()
        
    def on_execute(self):
        if self.on_init() == False:
            self.running = False
            
            
        while(self.running):
            pygame.event.pump()
            keys = pygame.key.get_pressed()
            
            if (keys[K_RIGHT]):
                self.player.move_right()
                
            if (keys[K_LEFT]):
                self.player.move_left()
                
            if (keys[K_UP]):
                self.player.move_up()
                
            if (keys[K_DOWN]):
                self.player.move_down
            
            if (keys[K_ESCAPE]):
                self.running = False
                
            self.on_loop()
            self.on_render()
            
            time.sleep (50.0 /100.0);
        self.on_cleanup()
        
if __name__ == "__main__" :
    theApp = App()
    theApp.on_execute()
        
        