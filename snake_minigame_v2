#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 12 11:08:27 2016

@author: William Cox
"""
import pygame
from random import randint
import numpy as np

 
# --- Globals ---
# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255,0,0)
 
# Set the width and height of each snake segment
segment_width = 15
segment_height = 15
neuro_width = 10
neuro_height = 10
# Margin between each segment
segment_margin = 3
 
# Set initial speed
x_change = segment_width + segment_margin
y_change = 0
 
 
class Segment(pygame.sprite.Sprite):
    """ Class to represent one segment of the snake. """
    # -- Methods
    # Constructor function
    def __init__(self, x, y):
        # Call the parent's constructor
        super().__init__()
 
        # Set height, width
        self.image = pygame.Surface([segment_width, segment_height])
        self.image.fill(WHITE)
 
        # Make our top-left corner the passed-in location.
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        
def collision(snake_segments):
    for ii in range(len(snake_segments)-1,1,-1):
        if snake_segments[0].rect.x == snake_segments[ii].rect.x:
            if snake_segments[0].rect.y == snake_segments[ii].rect.y:
                for jj in range(ii,len(snake_segments)):
                    temp = snake_segments.pop()
                    temp. image.fill(BLACK)
    for jj in range(len(snake_segments)-1):
        if snake_segments[jj].rect.x > 790:
            snake_segments[jj].rect.x = snake_segments[jj].rect.x % 790
        if snake_segments[jj].rect.y > 590:
            snake_segments[jj].rect.y = snake_segments[jj].rect.y + 600
        if snake_segments[jj].rect.x < 10:
            snake_segments[jj].rect.x = snake_segments[jj].rect.x + 800
        if snake_segments[jj].rect.x < 10:
            snake_segments[jj].rect.y = snake_segments[jj].rect.y % 590
    
   
    
            
            
                
class neuro(pygame.sprite.Sprite):
    
    def __init__(self):
        super().__init__()
        
        self.image = pygame.Surface([neuro_width, neuro_height])
        self.image.fill(RED)
        
        self.rect = self.image.get_rect()
        self.rect.x = randint(30,770)
        self.rect.y = randint(30,570)
    def update(self):
        
        self.rect = self.image.get_rect()
        self.rect.x = randint(30,770)
        self.rect.y = randint(30,570)
        pass
        
def collision_neuro(neuro,snake_segments):
    if np.abs(snake_segments[0].rect.x - neuro.rect.x) < 10:
        print('hello')
        if np.abs(snake_segments[0].rect.y - neuro.rect.y) < 10:
            print('but')
            neuro.update()
            x = snake_segments[len(snake_segments)-1].rect.x - (segment_width + segment_margin)
            y = snake_segments[len(snake_segments)-1].rect.y - (segment_height + segment_margin)
            segment = Segment(x,y)
            snake_segments.append(segment)
            allspriteslist.add(segment)
            
 
# Call this function so the Pygame library can initialize itself
pygame.init()
 
# Create an 800x600 sized screen
screen = pygame.display.set_mode([800, 600])
 
# Set the title of the window
pygame.display.set_caption('Dylans Bad Day')
 
allspriteslist = pygame.sprite.Group()
 
# Create an initial snake
snake_segments = []
for i in range(2):
    x = 250 - (segment_width + segment_margin) * i
    y = 30
    segment = Segment(x, y)
    snake_segments.append(segment)
    allspriteslist.add(segment)
    
#Create initial neurotransmitter

neuro = neuro()
allspriteslist.add(neuro)
 
 
clock = pygame.time.Clock()
done = False
 
while not done:
 
    for event in pygame.event.get():
        
 
        # Set the speed based on the key pressed
        # We want the speed to be enough that we move a full
        # segment, plus the margin.
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                x_change = (segment_width + segment_margin) * -1
                y_change = 0
                if abs(snake_segments[1].rect.x - snake_segments[0].rect.x + x_change) < 3:
                    x_change = 0
            if event.key == pygame.K_RIGHT:
                x_change = (segment_width + segment_margin)
                y_change = 0
                if abs(snake_segments[1].rect.x - snake_segments[0].rect.x + x_change) < 3:
                    x_change = 0
            if event.key == pygame.K_UP:
                x_change = 0
                y_change = (segment_height + segment_margin) * -1
                if abs(snake_segments[1].rect.y - snake_segments[0].rect.y + y_change) < 3:
                    y_change = 0
            if event.key == pygame.K_DOWN:
                x_change = 0
                y_change = (segment_height + segment_margin)
                if abs(snake_segments[1].rect.y - snake_segments[0].rect.y + y_change) < 3:
                    y_change = 0
            if event.key == pygame.K_ESCAPE:
                done = True
    collision(snake_segments)
    collision_neuro(neuro,snake_segments)
 
    # Get rid of last segment of the snake
    # .pop() command removes last item in list
    old_segment = snake_segments.pop()
    allspriteslist.remove(old_segment)
 
    # Figure out where new segment will be
    x = snake_segments[0].rect.x + x_change 
    y = snake_segments[0].rect.y + y_change 
    segment = Segment(x, y)
 
    # Insert new segment into the list
    snake_segments.insert(0, segment)
    allspriteslist.add(segment)
 
    # -- Draw everything
    # Clear screen
    screen.fill(BLACK)
 
    allspriteslist.draw(screen)
 
    # Flip screen
    pygame.display.flip()
 
    # Pause
    clock.tick(5)
 
pygame.quit()



                